[
  {
    "id": "site-free",
    "title": "Site vitrine de Free SAS",
    "image": "free_accueil.png",
    "github": "https://github.com/EthanCHEVRAND/presentation-free",
    "content": [
      {
        "type": "image",
        "url": "free_accueil.png",
        "desc": "Page d'accueil du site vitrine de Free SAS",
        "order": 1
      },
      {
        "type": "description",
        "title": "Savoirs/savoire-faire mobilisés",
        "desc": "Ce projet m'a principalement permis d'apprendre correctement les bases du HTML et du CSS. De plus, sur un aspect plus théorique, il m'a permis de comprendre l'importance d'un bon rapport entre l'esthétique et l'ergonomie.",
        "order": 2
      },
      {
        "type": "description",
        "title": "Cadre du projet",
        "desc": "Ce projet a été réalisé dans le cadre de ma première année en BUT Informatique. Il s'agit d'un site vitrine présentant l'entreprise Free SAS.",
        "order": 3
      },
      {
        "type": "description",
        "title": "Spécifications",
        "desc": "Il nous a été demandé de réaliser un site faisant principalement l'analyse économique d'une entreprise de la tech française. Notre choix s'est porté vers Free SAS, entreprise française pionnière dans le domaine des télécommunications. Une analyse technique et écologique a été rajoutée afin d'étoffer le contenu du site. Notre site a dû être accompagné d'un rapport économique de l'entreprise.",
        "order": 4
      },
      {
        "type": "description",
        "title": "Spécifications techniques",
        "desc": "Le site a été réalisé en HTML et CSS. Il s'agit d'un site web statique, sans interactions particulière avec l'utilisateur et sans back-end.",
        "order": 5
      },
      {
        "type": "button",
        "url": "https://ethanchevrand.github.io/presentation-free/",
        "text": "voir le site",
        "order": 6
      }
    ]
  },



  {
    "id": "crud-pompair",
    "title": "CRUD Pompair *",
    "image": "pompair_crud.png",
    "github": "",
    "content": [
      {
        "type": "image",
        "url": "pompair_crud.png",
        "desc": "Figure 1 - Page Client du CRUD Pompair",
        "order": 1
      },
      {
        "type": "description",
        "title": "Savoirs/savoire-faire mobilisés",
        "desc": "Ce projet m'a permis de consolider mes connaissances en développement web, en utilisant un framework (bootstrap) pour m'assister. De plus, il m'a évidemment permis d'améliorer ma compréhension de la création et de la gestion d'une base de donnée.",
        "order": 2
      },
      {
        "type": "description",
        "title": "Cadre du projet",
        "desc": "Ce projet a été réalisé dans le cadre de ma première année en BUT Informatique. Il s'agit d'un CRUD, c'est à dire un outil qui permet de Créer / Voir (Read) / Mettre à jour (Update) / Supprimer (Delete) des données. ",
        "order": 3
      },
      {
        "type": "description",
        "title": "Spécifications",
        "desc": "Nous devions réaliser un CRUD pour la société fictive Pompair, spécialisée dans la vente et l'entretien de pompes à chaleur. Le CRUD devait permettre de gérer les clients, les pompes, les commandes, les interventions, les agents,... ",
        "order": 4
      },
      {
        "type": "description",
        "title": "Spécifications techniques",
        "desc": "Le CRUD a été réalisé en HTML, CSS (avec le framework Bootstrap), avec un back-end en python (framework flask) et une gestion de la base de donnée en MySQL/MariaDB. Nous nous sommes servis de l'IDE jetbrains PyCharm Professionnal. ",
        "order": 5
      },
      {
        "type": "description",
        "title": "Mon rôle",
        "desc": "La réalisation de la page de gestion des clients m'a été confiée. Les clients avaient la particularité de pouvoir parraîner d'autres clients, ce qui a rajouté de la complexité à la tâche. De plus, les clients étaient liés à beaucoup d'autres tables, ce qui a donné lieu à une suppression en cascade sur plusieurs niveaux.",
        "order": 6
      },
      {
        "type": "description",
        "title": "Traces",
        "desc": "",
        "order": 7
      },
      {
        "type": "image",
        "url": "pompair_crud_suppression.png",
        "desc": "Figure 2 - Page de suppression en cascade d'un client",
        "order": 8
      },
      {
        "type": "description",
        "title": "",
        "desc": "La figure 2 est une capture d'écran de la page du CRUD permettant de supprimer les éléments liés à un client en particulier. Il est nécessaire de faire cette page car on ne peut techniquement pas supprimer un client sans supprimer les éléments qui font apparaître l'identifiant du dit client, on appelle cela une contrainte relationnelle. La page affiche tous les éléments liés au client, triés par type, et propose de les supprimer. ",
        "order": 9
      },
      {
        "type": "description",
        "title": "",
        "desc": "Pour créer cette page, il m'a fallu gérer d'un côté l'apparence, et de l'autre, le fonctionnement, c'est à dire afficher les bons éléments, faire en sorte que la suppression fonctionne, ... Pour l'apparence, j'ai créé différents tableau pour afficher les différents types d'éléments, ces tableaux s'affichent, même si ils sont vides. Ces tableaux ont été créés à l'aide du langage de balisage HTML, mais pour rajouter du \"style\" à ces tableaux, nous nous sommes servis de CSS avec le framework Bootstrap, qui contient tout un tas de styles prédéfinis, que nous avons ensuite personnalisés. ",
        "order": 10
      },
      {
        "type": "description",
        "title": "",
        "desc": "Pour le fonctionnement en lui même de la page, j'ai dû utiliser de nombreuses jointures, qui permettent d'intégrer plusieurs tables dans une même requête SQL afin de récupérer les différents éléments, avant de les transférer à la page par le biais du back-end python et de la page HTML. ",
        "order": 11
      },
      {
        "type": "description",
        "title": "",
        "desc": "La suppression en cascade d'un client a quelques particularitées qui la rende assez complexe. D'abord, on a affaire à des suppressions en cascade à deux niveaux (Client > Pompe > Commande/Intervention). De plus, comme les clients peuvent se parrainer, il faut gérer la suppression d'un client pour en supprimer un autre (au moment de la réalisation de ce projet, je n'ai pas réussi à trouver de solution pour effectuer cela, j'ai d'onc simplement affiché un message demandant à l'utilisateur de d'abord supprimé les clients parrainés par celui que l'on veut supprimer). ",
        "order": 12
      }
    ]
  },

  {
    "id": "pauvocoder",
    "title": "PauVocoder *",
    "image": "pauvocoder.png",
    "github": "",
    "content": [
      {
        "type": "image",
        "url": "pauvocoder.png",
        "desc": "Figure 1 - Fonction d'affichage du spectre sonore",
        "order": 1
      },
      {
        "type": "description",
        "title": "Savoirs/savoire-faire mobilisés",
        "desc": "Ce projet m'a permis de grandement amélioré mes connaissances en Java. J'ai également découvert l'IDE IntelliJ IDEA durant ce projet. De plus, j'ai appris à utiliser la bibliothèque StdAudio, qui permet de manipuler le son en Java.",
        "order": 2
      },
      {
        "type": "description",
        "title": "Cadre du projet",
        "desc": "Ce projet a été réalisé dans le cadre de ma première année en BUT Informatique. Il s'agit d'un programme permettant de manipuler le pitch, c'est à dire la hauteur du son d'un fichier audio.",
        "order": 3
      },
      {
        "type": "description",
        "title": "Spécifications",
        "desc": "Nous devions réaliser un programme permettant de faire varier le pitch d'un fichier audio. Le programme devait utiliser trois algorithmes \"basiques\", afin d'obtenir trois niveaux de qualité différents. Le programme devait également permettre d'afficher le spectre sonore du fichier audio.",
        "order": 4
      },
      {
        "type": "description",
        "title": "Spécifications techniques",
        "desc": "Le programme a été réalisé en Java, avec l'IDE IntelliJ IDEA. Il utilise la bibliothèque StdAudio pour manipuler le son. Le programme est en ligne de commande, il n'y a pas d'interface graphique.",
        "order": 5
      },
      {
        "type": "description",
        "title": "Traces",
        "desc": "",
        "order": 6
      },
      {
        "type": "image",
        "url": "pauvocoder_code_1.png",
        "desc": "Figure 2 - Structure globale des méthodes",
        "order": 7
      },
      {
        "type": "image",
        "url": "pauvocoder_code_2.png",
        "desc": "Figure 3 - Exemple de méthode (version simple du vocoder)",
        "order": 8
      },
      {
        "type": "image",
        "url": "pauvocoder_schema.png",
        "desc": "Figure 4 - Schématisation de l'algorithme de la méthode vocodeSimple",
        "order": 9
      },
      {
        "type": "description",
        "title": "",
        "desc": "Dans la Figure 2, on peut voir les signatures des différentes méthodes demandées dans le cadre du projet. La figure 3 montre le code de la méthode vocodeSimple, qui est la version la plus simple du vocoder. La figure 4 est un schéma de l'algorithme utilisé dans la méthode vocodeSimple.",
        "order": 10
      },
      {
        "type": "description",
        "title": "",
        "desc": "Les figures 2, 3 et 4 permettent d'illustrer ma capacité à penser à un algorithme, l'écrire en java et à le documenter à partir d'une signature de méthode (qui était donnée) et d'une explication du principe de l'algorithme. Pour réaliser tout cela, j'ai également dû comprendre le fonctionnement de la bibliothèque StdAudio à partir de la documentation et des fichiers sources ; nous avions réalisé un tp avant ce projet afin de découvrir cette bibliothèque. Au moment de la réalisation du projet, ma compréhension du java était encore assez limitée, car je n'avais pas encore réalisé de projet concret en java, celui-ci était le premier. J'ai ensuite pû me servir de cette expérience pour me lancer dans d'autres projets en java et essayer d'approfondir mes connaissances, notamment en abordant la programmation orientée objet.",
        "order": 11
      },
      {
        "type": "description",
        "title": "",
        "desc": "Les parties encadrées en orange et en rouge dans la figure 3 sont les parties du code permettant respectivement de préparer les différentes variables nécessaires puis de manipuler le tableau représentant le fichier audio, en suivant l'algorithme schématisé dans la figure 4. Il s'agit d'un algorithme relativement \"simple\", qui consiste à parcourir un tableau par morceau, puis de couper ou dupliquer ces morceaux de longueurs égales en appliquant un facteur de dilatation ou de contraction. ",
        "order": 12
      },
      {
        "type": "description",
        "title": "",
        "desc": "Les deux autres méthodes de vocoder, présente dans la figure 2, sont des versions plus complexes de ce même algorithme, afin d'améliorer la qualité du son en sortie. En effet, la méthode vocodeSimple renvoie un résultat de mauvaise qualité, avec de nombreux artefacts, car on diplique ou contracte des morceaux de manières brutes, sans tenir compte de la continuité du son. ",
        "order": 13
      }
    ]
  },



  {
    "id": "cdf",
    "title": "Chausson Della Famiglia",
    "image": "cdf.png",
    "github": "https://github.com/EthanCHEVRAND/ecommerce_chaussons",
    "content": [
      {
        "type": "button",
        "url": "https://ethanchevrand.github.io/ecommerce_chaussons/",
        "text": "voir le site",
        "order": 1
      }
    ]
  }
]